name: Credential Management

on:
  # Check credentials weekly
  schedule:
    - cron: '0 1 * * 1'  # Every Monday at 1 AM UTC
  
  # Manual credential check
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'check'
        type: choice
        options:
          - check
          - rotate
          - validate

jobs:
  credential-management:
    name: Manage Google Cloud Credentials
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
        
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Check credential status
      id: check_creds
      run: |
        echo "Checking Google Cloud credentials..."
        
        # Get current authentication info
        gcloud auth list --format="table(account,status)" > auth_status.txt
        cat auth_status.txt
        
        # Check service account details
        SA_EMAIL=$(gcloud config get-value account)
        echo "service_account=$SA_EMAIL" >> $GITHUB_OUTPUT
        
        # Test API access
        echo "Testing VertexAI API access..."
        if gcloud ai models list --region=europe-west4 --limit=1 >/dev/null 2>&1; then
          echo "api_access=true" >> $GITHUB_OUTPUT
          echo "‚úÖ VertexAI API access confirmed"
        else
          echo "api_access=false" >> $GITHUB_OUTPUT
          echo "‚ùå VertexAI API access failed"
        fi
        
        # Check token expiration
        TOKEN_INFO=$(gcloud auth application-default print-access-token --format="get(expires_in)" 2>/dev/null || echo "error")
        if [ "$TOKEN_INFO" != "error" ]; then
          echo "token_status=valid" >> $GITHUB_OUTPUT
          echo "‚úÖ Access token is valid"
        else
          echo "token_status=invalid" >> $GITHUB_OUTPUT
          echo "‚ùå Access token issues detected"
        fi
        
    - name: Generate credential report
      run: |
        echo "# Google Cloud Credential Report" > credential_report.md
        echo "**Generated:** $(date -u)" >> credential_report.md
        echo "**Service Account:** ${{ steps.check_creds.outputs.service_account }}" >> credential_report.md
        echo "**API Access:** ${{ steps.check_creds.outputs.api_access }}" >> credential_report.md
        echo "**Token Status:** ${{ steps.check_creds.outputs.token_status }}" >> credential_report.md
        echo "" >> credential_report.md
        
        # Add recommendations
        echo "## Recommendations" >> credential_report.md
        
        if [ "${{ steps.check_creds.outputs.api_access }}" = "false" ]; then
          echo "- ‚ö†Ô∏è **Action Required**: VertexAI API access failed" >> credential_report.md
          echo "  - Check service account permissions" >> credential_report.md
          echo "  - Verify VertexAI API is enabled" >> credential_report.md
          echo "  - Consider credential rotation" >> credential_report.md
        else
          echo "- ‚úÖ All credential checks passed" >> credential_report.md
        fi
        
        # Add rotation reminder (check if older than 60 days)
        echo "- üîÑ **Recommended**: Rotate service account keys every 90 days" >> credential_report.md
        echo "- üìä **Monitoring**: Check this report weekly for issues" >> credential_report.md
        
    - name: Create issue on credential problems
      if: steps.check_creds.outputs.api_access == 'false' || steps.check_creds.outputs.token_status == 'invalid'
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üîê Google Cloud Credential Issue Detected`,
            body: `## Google Cloud Credential Problem
            
            **Detection Date:** ${new Date().toISOString()}
            **Service Account:** ${{ steps.check_creds.outputs.service_account }}
            **API Access:** ${{ steps.check_creds.outputs.api_access }}
            **Token Status:** ${{ steps.check_creds.outputs.token_status }}
            
            ## Issues Detected
            ${steps.check_creds.outputs.api_access === 'false' ? '- ‚ùå VertexAI API access failed' : ''}
            ${steps.check_creds.outputs.token_status === 'invalid' ? '- ‚ùå Access token validation failed' : ''}
            
            ## Recommended Actions
            
            ### 1. Check Service Account Permissions
            \`\`\`bash
            # Verify the service account has required roles:
            gcloud projects get-iam-policy YOUR_PROJECT_ID \\
              --flatten="bindings[].members" \\
              --filter="bindings.members:serviceAccount:YOUR_SA_EMAIL"
            \`\`\`
            
            Required roles:
            - \`roles/aiplatform.user\`
            - \`roles/iam.serviceAccountTokenCreator\`
            
            ### 2. Verify API Access
            \`\`\`bash
            # Check if VertexAI API is enabled
            gcloud services list --enabled --filter="name:aiplatform.googleapis.com"
            
            # Test API access
            gcloud ai models list --region=europe-west4 --limit=1
            \`\`\`
            
            ### 3. Rotate Service Account Key (if needed)
            1. Generate new service account key
            2. Update \`GOOGLE_CLOUD_CREDENTIALS\` secret
            3. Test with manual workflow trigger
            
            ### 4. Alternative: Switch to Workload Identity
            Consider switching to Workload Identity for enhanced security:
            - No long-lived keys to manage
            - Automatic token rotation
            - Enhanced security posture
            
            ## Next Steps
            1. Investigate the specific issue using the steps above
            2. Update credentials if necessary
            3. Run manual credential check to verify fix
            4. Close this issue once resolved
            
            **Auto-generated by credential management workflow**`,
            labels: ['security', 'credentials', 'infrastructure']
          });
          
    - name: Upload credential report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: credential-report-${{ github.run_number }}
        path: credential_report.md
        retention-days: 30