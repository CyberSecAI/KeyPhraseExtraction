name: CVE Keyphrase Extraction Pipeline

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_full_reprocess:
        description: 'Force reprocessing of all CVEs (ignore existing)'
        required: false
        default: false
        type: boolean
      log_level:
        description: 'Logging level'
        required: false
        default: 'INFO'
        type: choice
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR

  # Run on pushes to main branch (for testing)
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/cve-keyphrase-extraction.yml'

env:
  PYTHON_VERSION: '3.12'
  LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}

jobs:
  cve-keyphrase-extraction:
    name: Extract and Process CVE Keyphrases
    runs-on: ubuntu-latest
    
    # Set timeout to 6 hours
    timeout-minutes: 360
    
    steps:
    - name: Checkout KeyPhraseExtraction repository
      uses: actions/checkout@v4
      with:
        path: KeyPhraseExtraction
        
    - name: Checkout CVE info repository
      uses: actions/checkout@v4
      with:
        repository: CyberSecAI/cve_info
        token: ${{ secrets.CVE_INFO_PAT }}
        path: cve_info
        
    - name: Checkout CVE data source repository
      uses: actions/checkout@v4
      with:
        repository: CyberSecAI/cvelistV5_process
        path: cvelistV5_process
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      working-directory: KeyPhraseExtraction
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
        
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Verify authentication
      run: |
        gcloud auth list
        gcloud config list
        
    - name: Create necessary directories
      working-directory: KeyPhraseExtraction
      run: |
        mkdir -p CVEs/description CVEs/keyphrases CVEs/all CVEs/invalid
        mkdir -p logs tmp
        
    - name: Check data sources
      working-directory: KeyPhraseExtraction
      run: |
        echo "Checking for CVE data sources..."
        if [ -f "../cvelistV5_process/data_out/cve_records_published.csv" ]; then
          echo "‚úì Found primary data source: cvelistV5_process"
          wc -l ../cvelistV5_process/data_out/cve_records_published.csv
        else
          echo "‚ö†Ô∏è Primary data source not found"
        fi
        
        if [ -d "../cve_info" ]; then
          echo "‚úì Found CVE info repository"
          find ../cve_info -name "*.json" | wc -l | xargs echo "Existing CVE files:"
        else
          echo "‚ö†Ô∏è CVE info repository not found"
        fi
        
    - name: Run keyphrase extraction
      working-directory: KeyPhraseExtraction
      run: |
        echo "Starting CVE keyphrase extraction pipeline..."
        
        # Step 1: Extract keyphrases
        echo "Step 1: Extracting keyphrases..."
        python keyphraseExtract.py \
          --cve-info-dir ../cve_info \
          --cve-data-path ../cvelistV5_process/data_out/cve_records_published.csv
          
    - name: Run quality control validation
      working-directory: KeyPhraseExtraction
      if: always()  # Run even if previous step fails
      run: |
        echo "Step 2: Running quality control validation..."
        python keyphraseExtract_check.py \
          --cve-info-dir ../cve_info \
          --input-dir CVEs/keyphrases
          
    - name: Merge JSON files
      working-directory: KeyPhraseExtraction
      if: success()  # Only run if previous steps succeeded
      run: |
        echo "Step 3: Merging JSON files..."
        python merge_jsons2all.py \
          --base-dir CVEs \
          --output-dir CVEs/all \
          --log-level ${{ env.LOG_LEVEL }}
          
    - name: Organize files to CVE info repository
      working-directory: KeyPhraseExtraction
      if: success()
      run: |
        echo "Step 4: Organizing files to CVE info repository..."
        python move2cve_dir_hash.py
        
    - name: Generate processing summary
      working-directory: KeyPhraseExtraction
      if: always()
      run: |
        echo "=== Processing Summary ===" | tee -a processing_summary.md
        echo "**Workflow run:** ${{ github.run_number }}" | tee -a processing_summary.md
        echo "**Date:** $(date -u)" | tee -a processing_summary.md
        echo "**Trigger:** ${{ github.event_name }}" | tee -a processing_summary.md
        echo "" | tee -a processing_summary.md
        
        # Count files in different directories
        if [ -d "CVEs/keyphrases" ]; then
          keyphrases_count=$(find CVEs/keyphrases -name "*.json" | wc -l)
          echo "**Keyphrase files:** $keyphrases_count" | tee -a processing_summary.md
        fi
        
        if [ -d "CVEs/all" ]; then
          merged_count=$(find CVEs/all -name "*.json" | wc -l)
          echo "**Merged files:** $merged_count" | tee -a processing_summary.md
        fi
        
        if [ -d "CVEs/invalid" ]; then
          invalid_count=$(find CVEs/invalid -name "*.json" | wc -l)
          echo "**Invalid files:** $invalid_count" | tee -a processing_summary.md
        fi
        
        # Check for error logs
        if [ -f "failed_cves.txt" ]; then
          failed_count=$(wc -l < failed_cves.txt)
          echo "**Failed CVEs:** $failed_count" | tee -a processing_summary.md
        fi
        
        echo "" | tee -a processing_summary.md
        echo "### Log Files" | tee -a processing_summary.md
        
        # Summarize main processing log
        if [ -f "logs/cve_processing.log" ]; then
          echo "**Main processing log:**" | tee -a processing_summary.md
          echo '```' | tee -a processing_summary.md
          tail -10 logs/cve_processing.log | tee -a processing_summary.md
          echo '```' | tee -a processing_summary.md
        fi
        
    - name: Upload processing logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: processing-logs-${{ github.run_number }}
        path: |
          KeyPhraseExtraction/logs/
          KeyPhraseExtraction/failed_cves.txt
          KeyPhraseExtraction/processing_summary.md
        retention-days: 30
        
    - name: Upload invalid files for analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: invalid-files-${{ github.run_number }}
        path: KeyPhraseExtraction/CVEs/invalid/
        retention-days: 7
        
    - name: Commit and push changes to CVE info repository
      working-directory: cve_info
      if: success()
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        if [ -n "$(git status --porcelain)" ]; then
          echo "Changes detected in CVE info repository"
          
          # Add all changes
          git add .
          
          # Create commit message with details
          commit_msg="ü§ñ Automated CVE keyphrase extraction
          
          - Workflow run: ${{ github.run_number }}
          - Date: $(date -u)
          - Repository: ${{ github.repository }}
          - Commit: ${{ github.sha }}
          
          Generated with GitHub Actions"
          
          git commit -m "$commit_msg"
          git push
          
          echo "‚úì Successfully pushed changes to CVE info repository"
        else
          echo "No changes to commit in CVE info repository"
        fi
        
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CVE Keyphrase Extraction Failed - Run #${{ github.run_number }}`,
            body: `## CVE Keyphrase Extraction Pipeline Failed
            
            **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Date:** ${new Date().toISOString()}
            **Trigger:** ${{ github.event_name }}
            **Branch:** ${{ github.ref }}
            
            ## Failure Details
            The automated CVE keyphrase extraction pipeline has failed. Please check the workflow logs for details.
            
            ## Next Steps
            1. Review the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Check the uploaded artifacts for processing logs
            3. Investigate any API authentication or quota issues
            4. Manually trigger the workflow after resolving issues
            
            ## Artifacts
            - Processing logs: \`processing-logs-${{ github.run_number }}\`
            - Invalid files: \`invalid-files-${{ github.run_number }}\`
            
            This issue was automatically created by the GitHub Actions workflow.`,
            labels: ['bug', 'automation', 'cve-processing']
          });
          
          console.log(`Created issue #${issue.data.number}`);
          
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ CVE keyphrase extraction pipeline completed successfully!"
        echo "üìä Check the processing summary artifact for details"
        echo "üîÑ Changes have been committed to the CVE info repository"